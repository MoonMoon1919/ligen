package ligen

import (
	"bytes"
	"errors"
	"io"
	"os"
	"strings"
	"text/template"
	"time"
)

/*
Generation -
- Each license may have different inputs
- A license may have _no_ inputs

Checking -
- Answer "what license is in this repo?"
*/

// MIT
// Body of text for an MIT License
const MitTemplateBody = `MIT License

Copyright (c) {{.Year}} {{.Holder}}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

`

// Template for MIT license
var MITTemplate = template.Must(template.New("MIT").Parse(MitTemplateBody))

// BSL 1.0
// Body of BSL 1.0 license
const BoostBody = `Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
`

// UNLICENSE
const UnlicenseBody = `This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>
`

// General use copyright line
var (
	InvalidYearError = errors.New("Invalid year")
	EmptyNameError   = errors.New("Name must not be empty")
	NameTooLongError = errors.New("Name must be 128 chars")
)

const (
	// MAX_NAME_LENGTH is the maximum amount of chars the holder of a copyright can contain
	// 128 picked arbitrarily, seemed reasonable
	MAX_NAME_LENGTH = 128
	// MAX_YEARS_PAST is the maximum amount of time in years that a copyright can be backdated
	// 50 picked arbitrarily, seemed reasonable
	MAX_YEARS_PAST = 50
)

type Copyright struct {
	Holder string
	Year   int
}

func NewCopyright(name string, year int) (Copyright, error) {
	currentYear := time.Now().Year()
	fiftyYearsAgo := currentYear - MAX_YEARS_PAST

	if year > currentYear || year < fiftyYearsAgo {
		return Copyright{}, InvalidYearError
	}

	strippedName := strings.TrimSpace(name)
	if len(strippedName) == 0 {
		return Copyright{}, EmptyNameError
	}

	if len(name) > MAX_NAME_LENGTH {
		return Copyright{}, NameTooLongError
	}

	return Copyright{Holder: name, Year: year}, nil
}

// Specific licenses
func MITGenerator(cr *Copyright, dest *bytes.Buffer) ([]Writeable, error) {
	if err := MITTemplate.Execute(dest, cr); err != nil {
		return nil, err
	}

	writeableSlice := make([]Writeable, 1)
	writeableSlice[0] = Writeable{content: dest.String(), path: "LICENSE"}

	return writeableSlice, nil
}

func BoostGenerator(cr *Copyright, dest *bytes.Buffer) ([]Writeable, error) {
	writeableSlice := make([]Writeable, 1)
	writeableSlice[0] = Writeable{content: BoostBody, path: "LICENSE"}

	return writeableSlice, nil
}

func UnlicenseGenerator(cr *Copyright, dest *bytes.Buffer) ([]Writeable, error) {
	writeableSlice := make([]Writeable, 1)
	writeableSlice[0] = Writeable{content: UnlicenseBody, path: "UNLICENSE"}

	return writeableSlice, nil
}

// License stuff

type LicenseType int

const (
	MIT LicenseType = iota + 1
	BOOST_1_0
	UNLICENSE
)

type Writeable struct {
	content string
	path    string
}

type writeableGenerator func(cr *Copyright, dest *bytes.Buffer) ([]Writeable, error)

func generatorFactory(licenseType LicenseType) (writeableGenerator, error) {
	switch licenseType {
	case MIT:
		return MITGenerator, nil
	case BOOST_1_0:
		return BoostGenerator, nil
	case UNLICENSE:
		return UnlicenseGenerator, nil
	default:
		return nil, errors.New("Unsupported license type")
	}
}

type License struct {
	copyright     Copyright
	generatorFunc writeableGenerator
}

func New(holder string, year int, licenseType LicenseType) (*License, error) {
	copyright, err := NewCopyright(holder, year)
	if err != nil {
		return &License{}, err
	}

	generatorFunc, err := generatorFactory(licenseType)
	if err != nil {
		return &License{}, err
	}

	return &License{
		copyright:     copyright,
		generatorFunc: generatorFunc,
	}, nil
}

func (l *License) Render() ([]Writeable, error) {
	var content bytes.Buffer

	writeable, err := l.generatorFunc(&l.copyright, &content)

	if err != nil {
		return nil, err
	}

	return writeable, nil
}

// File management
type RenderOptions struct {
	TrailingNewline bool
}

func Write(writer io.Writer, writeable *Writeable, renderOpts *RenderOptions) error {
	_, err := writer.Write([]byte(writeable.content))

	return err
}

type FileRepository struct{}

func (f FileRepository) Write(license *License) error {
	writeables, err := license.Render()
	if err != nil {
		return err
	}

	renderOpts := &RenderOptions{}

	write := func(writeable *Writeable, render *RenderOptions) error {
		file, err := os.OpenFile(writeable.path, os.O_CREATE|os.O_WRONLY, 0644)
		if err != nil {
			return err
		}
		defer file.Close()

		Write(file, writeable, render)

		return nil
	}

	for _, writeable := range writeables {
		write(&writeable, renderOpts)
	}

	return nil
}
